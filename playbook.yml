---

- name: config
  gather_facts: false
  hosts:
    - pi
    - localhost
  tags:
    - always
  tasks:
    - name: load config
      community.sops.load_vars:
        file: config.yml

- name: setup
  gather_facts: false
  hosts: pi
  tags:
    - setup
  tasks:
    - name: update cache
      ansible.builtin.apt:
        update_cache: true
        cache_valid_time: 3600

    - name: install
      ansible.builtin.apt:
        name:
          - vim
          - python3-venv

    - name: install docker sdk
      ansible.builtin.pip:
        name:
          - docker
          - jsondiff
          - pyyaml

    - name: install pipx
      ansible.builtin.pip:
        executable: pip3
        name: pipx
        extra_args: --user
      become_user: pi

    - name: install poetry
      community.general.pipx:
        name: poetry
      become_user: pi

- name: datadog
  gather_facts: false
  hosts: pi
  tags:
    - datadog
  tasks:
    - name: install agent
      ansible.builtin.shell:
        cmd: >
          DD_AGENT_MAJOR_VERSION=7
          DD_API_KEY={{ config.datadog.api_key }}
          DD_SITE=datadoghq.com
          bash -c "$(curl -L https://s3.amazonaws.com/dd-agent/scripts/install_script.sh)"
        creates: /etc/datadog-agent/datadog.yaml

    - name: configure
      ansible.builtin.lineinfile:
        path: /etc/datadog-agent/datadog.yaml
        line: "dogstatsd_socket: /opt/datadog-agent/run/dogstatsd.sock"
      notify: restart

  handlers:
    - name: restart datadog
      ansible.builtin.systemd:
        daemon_reload: true
        name: datadog-agent
        state: restarted
      listen: restart

- name: deploy light
  gather_facts: false
  hosts: pi
  tags:
    - light
  tasks:
    - name: install
      ansible.builtin.apt:
        name:
          - libglib2.0-dev

    - name: create directory
      ansible.builtin.file:
        path: /home/pi/light-puck
        owner: pi
        group: pi
        state: directory

    - name: copy files
      ansible.builtin.copy:
        src: "light-puck/{{ item }}"
        dest: "/home/pi/light-puck/{{ item }}"
      loop:
        - pyproject.toml
        - poetry.toml
        - poetry.lock
      become_user: pi
      notify: restart

    - name: install dependencies
      ansible.builtin.shell:
        cmd: /home/pi/.local/bin/poetry install
        chdir: /home/pi/light-puck
      become_user: pi

    - name: copy script
      ansible.builtin.copy:
        src: "light-puck/{{ item }}"
        dest: "/home/pi/light-puck/{{ item }}"
      loop:
        - light.py
      become_user: pi
      tags:
        - light-script
      notify: restart

    - name: install service
      ansible.builtin.template:
        src: light-puck/light-puck.service
        dest: /etc/systemd/system
        owner: root
        group: root
      notify: restart

    - name: enable service
      ansible.builtin.systemd:
        name: light-puck
        enabled: true

  handlers:
    - name: restart service
      ansible.builtin.systemd:
        daemon_reload: true
        name: light-puck
        state: restarted
      listen: restart

- name: deploy vpn
  gather_facts: false
  hosts: pi
  tags:
    - vpn
  tasks:
    - name: install
      ansible.builtin.apt:
        name:
          - wireguard

    - name: ipv4 forward
      ansible.posix.sysctl:
        name: net.ipv4.ip_forward
        value: '1'
        state: present
        reload: yes
      notify: restart

    - name: ipv6 forward
      ansible.posix.sysctl:
        name: net.ipv6.conf.all.forwarding
        value: '1'
        state: present
        reload: yes
      notify: restart

    - name: configure
      ansible.builtin.copy:
        content: "{{ lookup('community.sops.sops', 'vpn/pi-wg1.conf') }}"
        dest: /etc/wireguard/wg1.conf
        owner: root
        group: root
        mode: u=rw,g=,o=
      notify: restart

    - name: enable service
      ansible.builtin.systemd:
        name: wg-quick@wg1.service
        enabled: true

  handlers:
    - name: restart service
      ansible.builtin.systemd:
        daemon_reload: true
        name: wg-quick@wg1.service
        state: restarted
      listen: restart

- name: deploy secrets
  gather_facts: false
  hosts: pi
  tags:
    - traefik
  tasks:
    - name: traefik users
      community.general.docker_secret:
        name: traefik_users_secret
        data: "{{ lookup('community.sops.sops', 'traefik/users') }}"

    - name: cloudflare api key
      community.general.docker_secret:
        name: cloudflare_api_key_secret
        data: "{{ config.cloudflare.api_key }}"

- name: deploy traefik
  gather_facts: false
  hosts: pi
  tags:
    - traefik
  tasks:
    - name: create directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: root
        group: root
        state: directory
      loop:
        - /mnt/external/traefik/acme

    - name: deploy stack
      community.general.docker_stack:
        name: traefik
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              traefik:
                image: traefik:v2.5
                command: >
                  --api.dashboard=true
                  --providers.docker
                  --providers.docker.exposedbydefault=false
                  --providers.docker.network=traefik_traefik
                  --entrypoints.web.address=:80
                  --entrypoints.web.http.redirections.entrypoint.permanent=false
                  --entrypoints.web.http.redirections.entrypoint.scheme=https
                  --entrypoints.web.http.redirections.entrypoint.to=websecure
                  --entrypoints.websecure.address=:443
                  --certificatesresolvers.letsencrypt.acme.caserver=https://acme-v02.api.letsencrypt.org/directory
                  --certificatesresolvers.letsencrypt.acme.dnschallenge=true
                  --certificatesresolvers.letsencrypt.acme.dnschallenge.provider=cloudflare
                  --certificatesresolvers.letsencrypt.acme.storage=/etc/traefik/acme/acme.json
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.middlewares.traefik-auth.basicauth.usersfile=/run/secrets/traefik_users_secret"
                  - "traefik.http.routers.traefik.rule=Host(`traefik.{{ config.domain }}`) && (PathPrefix(`/api`) || PathPrefix(`/dashboard`))"
                  - "traefik.http.routers.traefik.entrypoints=websecure"
                  - "traefik.http.routers.traefik.tls.certresolver=letsencrypt"
                  - "traefik.http.routers.traefik.service=api@internal"
                  - "traefik.http.routers.traefik.middlewares=traefik-auth"
                secrets:
                  - traefik_users_secret
                  - cloudflare_api_key_secret
                environment:
                  CF_DNS_API_TOKEN_FILE: /run/secrets/cloudflare_api_key_secret
                ports:
                  - '80:80'
                  - '443:443'
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - /mnt/external/traefik/acme:/etc/traefik/acme
                networks:
                  - traefik
            secrets:
              traefik_users_secret:
                external: true
                name: traefik_users_secret
              cloudflare_api_key_secret:
                external: true
                name: cloudflare_api_key_secret
            networks:
              traefik: {}

- name: deploy portainer
  gather_facts: false
  hosts: pi
  tags:
    - portainer
  tasks:
    - name: deploy stack
      community.general.docker_stack:
        name: portainer
        prune: yes
        resolve_image: always
        compose:
          - version: '3.2'
            services:
              agent:
                image: portainer/agent
                volumes:
                  - /var/run/docker.sock:/var/run/docker.sock
                  - /mnt/external/docker/volumes:/var/lib/docker/volumes
                networks:
                  - agent_network
                deploy:
                  mode: global
                  placement:
                    constraints: [node.platform.os == linux]
              portainer:
                image: portainer/portainer-ce
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.portainer.rule=Host(`portainer.{{ config.domain }}`)"
                  - "traefik.http.routers.portainer.entrypoints=websecure"
                  - "traefik.http.routers.portainer.tls.certresolver=letsencrypt"
                  - "traefik.http.services.portainer.loadbalancer.server.port=9000"
                command: -H tcp://tasks.agent:9001 --tlsskipverify
                ports:
                  - "8000:8000"
                volumes:
                  - portainer_data:/data
                networks:
                  - agent_network
                  - traefik_traefik
                deploy:
                  mode: replicated
                  replicas: 1
                  placement:
                    constraints: [node.role == manager]
            networks:
              agent_network:
                driver: overlay
                attachable: true
              traefik_traefik:
                external: true
            volumes:
              portainer_data:

- name: deploy registry
  gather_facts: false
  hosts: pi
  tags:
    - registry
  tasks:
    - name: create directory
      ansible.builtin.file:
        path: /mnt/external/registry
        owner: root
        group: root
        state: directory

    - name: deploy task
      community.general.docker_stack:
        name: registry
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              registry:
                image: registry:2
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.registry.rule=Host(`registry.{{ config.domain }}`)"
                  - "traefik.http.routers.registry.entrypoints=websecure"
                  - "traefik.http.routers.registry.tls.certresolver=letsencrypt"
                  - "traefik.http.services.registry.loadbalancer.server.port=5000"
                volumes:
                  - /mnt/external/registry:/var/lib/registry
                networks:
                  - traefik_traefik
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first
            networks:
              traefik_traefik:
                external: true

    - name: wait for registry
      ansible.builtin.uri:
        method: GET
        url: "https://registry.{{ config.domain }}"
      register: result
      until: result is succeeded
      retries: 60
      delay: 5

- name: deploy homepage
  gather_facts: false
  hosts: pi
  tags:
    - homepage
  tasks:
    - name: build
      community.docker.docker_image:
        name: "registry.{{ config.domain }}/homepage"
        source: build
        force_source: true
        push: true
        build:
          pull: false
          path: homepage
          platform: linux/arm64/v8
      delegate_to: localhost
      register: build_result

    - name: deploy stack
      community.general.docker_stack:
        name: homepage
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              homepage:
                image: "{{ build_result.image.RepoDigests[0] }}"
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.homepage.rule=Host(`pi.{{ config.domain }}`)"
                  - "traefik.http.routers.homepage.entrypoints=websecure"
                  - "traefik.http.routers.homepage.tls.certresolver=letsencrypt"
                  - "traefik.http.services.homepage.loadbalancer.server.port=80"
                environment:
                  DOMAIN: "{{ config.domain }}"
                networks:
                  - traefik_traefik
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first
            networks:
              traefik_traefik:
                external: true

- name: deploy resilio sync
  gather_facts: false
  hosts: pi
  tags:
    - sync
  tasks:
    - name: create directories
      ansible.builtin.file:
        path: "{{ item }}"
        owner: pi
        group: pi
        state: directory
      loop:
        - /mnt/external/resilio-sync/config
        - /mnt/external/resilio-sync/downloads
        - /mnt/external/resilio-sync/sync

    - name: deploy stack
      community.general.docker_stack:
        name: resilio-sync
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              resilio-sync:
                image: linuxserver/resilio-sync:latest
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.sync.rule=Host(`sync.{{ config.domain }}`)"
                  - "traefik.http.routers.sync.entrypoints=websecure"
                  - "traefik.http.routers.sync.tls.certresolver=letsencrypt"
                  - "traefik.http.services.sync.loadbalancer.server.port=8888"
                networks:
                  - traefik_traefik
                environment:
                  PUID: "1000"
                  PGID: "1000"
                  TZ: America/Los_Angeles
                  UMASK_SET: "022"
                volumes:
                  - /mnt/external/resilio-sync/config:/config
                  - /mnt/external/resilio-sync/downloads:/downloads
                  - /mnt/external/resilio-sync/sync:/sync
                ports:
                  - 55555:55555
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first
            networks:
              traefik_traefik:
                external: true

- name: deploy cloudflare ddns
  gather_facts: false
  hosts: pi
  tasks:
    - name: deploy stack
      community.general.docker_stack:
        name: cloudflare-ddns
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              cloudflare-ddns:
                image: oznu/cloudflare-ddns:arm64v8
                environment:
                  ZONE: "{{ config.cloudflare.zone }}"
                  SUBDOMAIN: "{{ config.cloudflare.subdomain }}"
                  API_KEY_FILE: /run/secrets/cloudflare_api_key_secret
                secrets:
                  - cloudflare_api_key_secret
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first
            secrets:
              cloudflare_api_key_secret:
                external: true
                name: cloudflare_api_key_secret

- name: deploy temporalite
  gather_facts: false
  hosts: pi
  tags:
    - temporalite
  tasks:
    - name: build
      community.docker.docker_image:
        name: "registry.{{ config.domain }}/temporalite"
        source: build
        force_source: true
        push: true
        build:
          pull: false
          path: temporalite
          platform: linux/arm64/v8
      delegate_to: localhost
      register: build_result

    - name: create directories
      ansible.builtin.file:
        path: /mnt/external/temporalite
        owner: pi
        group: pi
        state: directory

    - name: deploy stack
      community.general.docker_stack:
        name: temporalite
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              temporalite:
                image: "{{ build_result.image.RepoDigests[0] }}"
                volumes:
                  - /mnt/external/temporalite:/work
                ports:
                  - 7233:7233
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first

- name: deploy temporal web
  gather_facts: false
  hosts: pi
  tags:
    - temporal-web
  tasks:
    - name: clone
      ansible.builtin.git:
        repo: https://github.com/temporalio/web.git
        dest: "{{ playbook_dir}}/build/temporal-web"
        version: v1.12.0
        depth: 1
        force: true
      delegate_to: localhost

    - name: patch dockerignore
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/build/temporal-web/.dockerignore"
        line: ".git"
      delegate_to: localhost

    - name: patch dockerfile
      ansible.builtin.lineinfile:
        path: "{{ playbook_dir }}/build/temporal-web/Dockerfile"
        insertbefore: "# Install app dependencies"
        line: RUN apk add --no-cache python3 build-base
      delegate_to: localhost

    - name: build
      community.docker.docker_image:
        name: "registry.{{ config.domain }}/temporal-web"
        source: build
        force_source: true
        push: true
        build:
          pull: false
          path: build/temporal-web
          platform: linux/arm64/v8
      delegate_to: localhost
      register: build_result

    - name: deploy stack
      community.general.docker_stack:
        name: temporal-web
        prune: yes
        resolve_image: always
        compose:
          - version: '3.8'
            services:
              homepage:
                image: "{{ build_result.image.RepoDigests[0] }}"
                labels:
                  - "traefik.enable=true"
                  - "traefik.http.routers.temporal.rule=Host(`temporal.{{ config.domain }}`)"
                  - "traefik.http.routers.temporal.entrypoints=websecure"
                  - "traefik.http.routers.temporal.tls.certresolver=letsencrypt"
                  - "traefik.http.services.temporal.loadbalancer.server.port=8088"
                environment:
                  TEMPORAL_GRPC_ENDPOINT: "pi.{{ config.domain }}:7233"
                  TEMPORAL_PERMIT_WRITE_API: 'true'
                networks:
                  - traefik_traefik
                deploy:
                  mode: replicated
                  replicas: 1
                  restart_policy:
                    condition: any
                  update_config:
                    order: stop-first
            networks:
              traefik_traefik:
                external: true
